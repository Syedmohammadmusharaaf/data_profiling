# =============================================================================
# PII/PHI Scanner Configuration File (db_config.ini)
# =============================================================================
# 
# This configuration file defines the data source for schema extraction.
# The scanner supports two primary modes:
# 1. Direct database connections
# 2. File-based schema sources
#
# **Configuration Modes:**
# - [database]: Connect directly to MySQL, SQL Server, or Oracle databases
# - [schema_file]: Read schema from DDL, CSV, JSON, XML, or Excel files
#
# **Security Notes:**
# - Store database credentials securely
# - Use environment variables for production passwords
# - Limit database user permissions to read-only schema access
# - Consider using database service accounts with minimal privileges
#
# Version: 1.0 POC
# =============================================================================

# -----------------------------------------------------------------------------
# DATABASE CONNECTION CONFIGURATION
# -----------------------------------------------------------------------------
# Use this section to connect directly to a database and extract live schema
# information. The scanner will connect to the database, enumerate tables,
# and extract column metadata automatically.
#
# **Supported Database Types:**
# - mssql: Microsoft SQL Server (requires pyodbc and ODBC drivers)
# - mysql: MySQL/MariaDB (requires mysql-connector-python)
# - oracle: Oracle Database (requires oracledb)
#
# **Security Considerations:**
# - Use read-only database accounts
# - Ensure network connectivity and firewall rules
# - Consider VPN or secure connections for remote databases
# - Test connections with minimal privilege accounts first
# -----------------------------------------------------------------------------

[database]
# Database type - determines which connector to use
# Valid values: mssql, mysql, oracle
type = mssql

# Database server connection details
# For SQL Server, can include instance name: localhost\SQLEXPRESS
# For clustered environments, use appropriate cluster address
host = localhost\SQLEXPRESS

# Database port number
# Standard ports: MySQL=3306, SQL Server=1433, Oracle=1521
# Verify your database's actual port configuration
port = 1433

# Database authentication credentials
# Consider using service accounts with minimal required permissions
# For production, store these in secure credential management systems
user = admin
password = Admin@1234

# Target database name
# This is the database containing the tables you want to analyze
# For Oracle, this is typically the service name or SID
database = AdventureWorks2022

# Optional: Schema name filter (database-specific)
# SQL Server: dbo, custom schemas
# Oracle: Usually uppercase schema names
# MySQL: Typically same as database name
# Leave empty to analyze all accessible schemas
# schema = dbo

# -----------------------------------------------------------------------------
# FILE-BASED SCHEMA CONFIGURATION  
# -----------------------------------------------------------------------------
# Use this section to analyze schema from files instead of live databases.
# This is useful for:
# - Analyzing schema documentation
# - Working with exported database schemas
# - Testing with sample data
# - Environments without direct database access
#
# **Supported File Formats:**
# - .ddl/.sql: SQL CREATE TABLE statements
# - .csv: Comma-separated schema metadata
# - .json: JSON-formatted schema information
# - .xml: XML hierarchical schema definitions
# - .xlsx: Excel spreadsheets with schema data
# -----------------------------------------------------------------------------

[schema_file]
# Path to the schema file to analyze
# Can be absolute or relative to the scanner directory
# Examples:
#   path = sample_schema.ddl
#   path = /data/exports/production_schema.sql
#   path = C:\schemas\customer_database.xlsx
#
# **File Format Requirements:**
# 
# CSV Format - Must include these columns:
#   schema_name, table_name, column_name, data_type
#
# JSON Format - Array of objects with these fields:
#   [{"schema_name": "dbo", "table_name": "users", "column_name": "id", "data_type": "INT"}, ...]
#
# XML Format - Hierarchical structure:
#   <Table name="users" schema="dbo">
#     <Column name="id" type="INT"/>
#   </Table>
#
# DDL/SQL Format - Standard CREATE TABLE statements:
#   CREATE TABLE schema.table (column datatype, ...);

# Uncomment and modify the path below to use a schema file instead of database connection
path = sample_schema.ddl

# =============================================================================
# CONFIGURATION USAGE NOTES
# =============================================================================
#
# **Switching Between Modes:**
# 1. For database analysis: Comment out [schema_file] section, uncomment [database]
# 2. For file analysis: Comment out [database] section, uncomment [schema_file]
# 3. Only one section should be active at a time
#
# **Testing Your Configuration:**
# Run the test script to validate your configuration:
#   python test_setup.py
#
# **Troubleshooting:**
# - Database connection issues: Check credentials, network, and driver installation
# - File parsing issues: Verify file format and structure
# - Permission errors: Ensure file/database access permissions
# - Driver issues: Install required database connectors (see requirements.txt)
#
# **Production Recommendations:**
# - Use environment variables for sensitive credentials
# - Implement proper access controls and auditing
# - Test configurations in staging environments first
# - Document any custom schema or naming conventions
#
# =============================================================================